/* tslint:disable */
/* eslint-disable */
/**
 * Simple API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 *
 * @export
 * @interface CreateArticleDto
 */
export interface CreateArticleDto {
  /**
   * Article title
   * @type {string}
   * @memberof CreateArticleDto
   */
  title: string;
  /**
   * Article description
   * @type {string}
   * @memberof CreateArticleDto
   */
  description: string;
}
/**
 *
 * @export
 * @interface CreateArticleResponse
 */
export interface CreateArticleResponse {
  /**
   *
   * @type {CreateArticleResponseData}
   * @memberof CreateArticleResponse
   */
  data: CreateArticleResponseData;
  /**
   *
   * @type {ResponseDtoError}
   * @memberof CreateArticleResponse
   */
  error: ResponseDtoError | null;
  /**
   *
   * @type {HttpStatus}
   * @memberof CreateArticleResponse
   */
  status: HttpStatus;
}

/**
 *
 * @export
 * @interface CreateArticleResponseData
 */
export interface CreateArticleResponseData {
  /**
   * Article id
   * @type {string}
   * @memberof CreateArticleResponseData
   */
  id: string;
  /**
   * Article title
   * @type {string}
   * @memberof CreateArticleResponseData
   */
  title: string;
  /**
   * Article description
   * @type {string}
   * @memberof CreateArticleResponseData
   */
  description: string;
  /**
   * Article author id
   * @type {string}
   * @memberof CreateArticleResponseData
   */
  authorId: string;
  /**
   * Article publication date
   * @type {string}
   * @memberof CreateArticleResponseData
   */
  publicationDate: string;
  /**
   * Article created date
   * @type {string}
   * @memberof CreateArticleResponseData
   */
  createdAt: string;
  /**
   * Article updated date
   * @type {string}
   * @memberof CreateArticleResponseData
   */
  updatedAt: string;
}
/**
 *
 * @export
 * @interface DeleteArticleResponse
 */
export interface DeleteArticleResponse {
  /**
   *
   * @type {any}
   * @memberof DeleteArticleResponse
   */
  data: any | null;
  /**
   *
   * @type {any}
   * @memberof DeleteArticleResponse
   */
  error: any;
  /**
   *
   * @type {any}
   * @memberof DeleteArticleResponse
   */
  status: any;
}
/**
 *
 * @export
 * @interface GetArticleResponse
 */
export interface GetArticleResponse {
  /**
   *
   * @type {GetArticleResponseData}
   * @memberof GetArticleResponse
   */
  data: GetArticleResponseData;
  /**
   *
   * @type {ResponseDtoError}
   * @memberof GetArticleResponse
   */
  error: ResponseDtoError | null;
  /**
   *
   * @type {HttpStatus}
   * @memberof GetArticleResponse
   */
  status: HttpStatus;
}

/**
 *
 * @export
 * @interface GetArticleResponseData
 */
export interface GetArticleResponseData {
  /**
   * Article id
   * @type {string}
   * @memberof GetArticleResponseData
   */
  id: string;
  /**
   * Article title
   * @type {string}
   * @memberof GetArticleResponseData
   */
  title: string;
  /**
   * Article description
   * @type {string}
   * @memberof GetArticleResponseData
   */
  description: string;
  /**
   * Article author id
   * @type {string}
   * @memberof GetArticleResponseData
   */
  authorId: string;
  /**
   * Article publication date
   * @type {string}
   * @memberof GetArticleResponseData
   */
  publicationDate: string;
  /**
   * Article created date
   * @type {string}
   * @memberof GetArticleResponseData
   */
  createdAt: string;
  /**
   * Article updated date
   * @type {string}
   * @memberof GetArticleResponseData
   */
  updatedAt: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export const HttpStatus = {
  NUMBER_100: 100,
  NUMBER_101: 101,
  NUMBER_102: 102,
  NUMBER_103: 103,
  NUMBER_200: 200,
  NUMBER_201: 201,
  NUMBER_202: 202,
  NUMBER_203: 203,
  NUMBER_204: 204,
  NUMBER_205: 205,
  NUMBER_206: 206,
  NUMBER_300: 300,
  NUMBER_301: 301,
  NUMBER_302: 302,
  NUMBER_303: 303,
  NUMBER_304: 304,
  NUMBER_307: 307,
  NUMBER_308: 308,
  NUMBER_400: 400,
  NUMBER_401: 401,
  NUMBER_402: 402,
  NUMBER_403: 403,
  NUMBER_404: 404,
  NUMBER_405: 405,
  NUMBER_406: 406,
  NUMBER_407: 407,
  NUMBER_408: 408,
  NUMBER_409: 409,
  NUMBER_410: 410,
  NUMBER_411: 411,
  NUMBER_412: 412,
  NUMBER_413: 413,
  NUMBER_414: 414,
  NUMBER_415: 415,
  NUMBER_416: 416,
  NUMBER_417: 417,
  NUMBER_418: 418,
  NUMBER_421: 421,
  NUMBER_422: 422,
  NUMBER_424: 424,
  NUMBER_428: 428,
  NUMBER_429: 429,
  NUMBER_500: 500,
  NUMBER_501: 501,
  NUMBER_502: 502,
  NUMBER_503: 503,
  NUMBER_504: 504,
  NUMBER_505: 505,
} as const;

export type HttpStatus = (typeof HttpStatus)[keyof typeof HttpStatus];

/**
 *
 * @export
 * @interface ListArticlesResponse
 */
export interface ListArticlesResponse {
  /**
   *
   * @type {Array<ListArticlesResponseData>}
   * @memberof ListArticlesResponse
   */
  data: Array<ListArticlesResponseData>;
  /**
   *
   * @type {PaginatedResponseMeta}
   * @memberof ListArticlesResponse
   */
  meta: PaginatedResponseMeta | null;
  /**
   *
   * @type {HttpStatus}
   * @memberof ListArticlesResponse
   */
  status: HttpStatus;
  /**
   *
   * @type {ResponseDtoError}
   * @memberof ListArticlesResponse
   */
  error: ResponseDtoError | null;
}

/**
 *
 * @export
 * @interface ListArticlesResponseData
 */
export interface ListArticlesResponseData {
  /**
   * Article id
   * @type {string}
   * @memberof ListArticlesResponseData
   */
  id: string;
  /**
   * Article title
   * @type {string}
   * @memberof ListArticlesResponseData
   */
  title: string;
  /**
   * Article description
   * @type {string}
   * @memberof ListArticlesResponseData
   */
  description: string;
  /**
   * Article author id
   * @type {string}
   * @memberof ListArticlesResponseData
   */
  authorId: string;
  /**
   * Article publication date
   * @type {string}
   * @memberof ListArticlesResponseData
   */
  publicationDate: string;
  /**
   * Article created date
   * @type {string}
   * @memberof ListArticlesResponseData
   */
  createdAt: string;
  /**
   * Article updated date
   * @type {string}
   * @memberof ListArticlesResponseData
   */
  updatedAt: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export const OrderEnum = {
  Asc: 'ASC',
  Desc: 'DESC',
} as const;

export type OrderEnum = (typeof OrderEnum)[keyof typeof OrderEnum];

/**
 *
 * @export
 * @interface PaginatedResponseDto
 */
export interface PaginatedResponseDto {
  /**
   *
   * @type {Array<string>}
   * @memberof PaginatedResponseDto
   */
  data: Array<string> | null;
  /**
   *
   * @type {PaginatedResponseMeta}
   * @memberof PaginatedResponseDto
   */
  meta: PaginatedResponseMeta | null;
  /**
   *
   * @type {HttpStatus}
   * @memberof PaginatedResponseDto
   */
  status: HttpStatus;
  /**
   *
   * @type {ResponseDtoError}
   * @memberof PaginatedResponseDto
   */
  error: ResponseDtoError | null;
}

/**
 *
 * @export
 * @interface PaginatedResponseMeta
 */
export interface PaginatedResponseMeta {
  /**
   *
   * @type {number}
   * @memberof PaginatedResponseMeta
   */
  curPage: number;
  /**
   *
   * @type {number}
   * @memberof PaginatedResponseMeta
   */
  perPage: number;
  /**
   *
   * @type {number}
   * @memberof PaginatedResponseMeta
   */
  total: number;
}
/**
 *
 * @export
 * @interface ResponseDto
 */
export interface ResponseDto {
  /**
   *
   * @type {object}
   * @memberof ResponseDto
   */
  data: object | null;
  /**
   *
   * @type {ResponseDtoError}
   * @memberof ResponseDto
   */
  error: ResponseDtoError | null;
  /**
   *
   * @type {HttpStatus}
   * @memberof ResponseDto
   */
  status: HttpStatus;
}

/**
 *
 * @export
 * @interface ResponseDtoError
 */
export interface ResponseDtoError {
  /**
   *
   * @type {ResponseErrorCode}
   * @memberof ResponseDtoError
   */
  code: ResponseErrorCode;
  /**
   *
   * @type {string}
   * @memberof ResponseDtoError
   */
  message: string;
  /**
   *
   * @type {ResponseErrorError}
   * @memberof ResponseDtoError
   */
  error: ResponseErrorError;
}
/**
 *
 * @export
 * @interface ResponseError
 */
export interface ResponseError {
  /**
   *
   * @type {ResponseErrorCode}
   * @memberof ResponseError
   */
  code: ResponseErrorCode;
  /**
   *
   * @type {string}
   * @memberof ResponseError
   */
  message: string;
  /**
   *
   * @type {ResponseErrorError}
   * @memberof ResponseError
   */
  error: ResponseErrorError;
}
/**
 * @type ResponseErrorCode
 * @export
 */
export type ResponseErrorCode = number | string;

/**
 * @type ResponseErrorError
 * @export
 */
export type ResponseErrorError = object | string;

/**
 *
 * @export
 * @interface SignInDto
 */
export interface SignInDto {
  /**
   * User email
   * @type {string}
   * @memberof SignInDto
   */
  email: string;
  /**
   * User password
   * @type {string}
   * @memberof SignInDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface SignInResponse
 */
export interface SignInResponse {
  /**
   *
   * @type {SignInResponseData}
   * @memberof SignInResponse
   */
  data: SignInResponseData;
  /**
   *
   * @type {ResponseDtoError}
   * @memberof SignInResponse
   */
  error: ResponseDtoError | null;
  /**
   *
   * @type {HttpStatus}
   * @memberof SignInResponse
   */
  status: HttpStatus;
}

/**
 *
 * @export
 * @interface SignInResponseData
 */
export interface SignInResponseData {
  /**
   * Access token
   * @type {string}
   * @memberof SignInResponseData
   */
  accessToken: string;
  /**
   * Token expiration seconds
   * @type {number}
   * @memberof SignInResponseData
   */
  expiresIn: number;
}
/**
 *
 * @export
 * @interface SignUpDto
 */
export interface SignUpDto {
  /**
   * User name
   * @type {string}
   * @memberof SignUpDto
   */
  username: string;
  /**
   * User email
   * @type {string}
   * @memberof SignUpDto
   */
  email: string;
  /**
   * User password
   * @type {string}
   * @memberof SignUpDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface SignUpResponse
 */
export interface SignUpResponse {
  /**
   *
   * @type {SignUpResponseData}
   * @memberof SignUpResponse
   */
  data: SignUpResponseData;
  /**
   *
   * @type {ResponseDtoError}
   * @memberof SignUpResponse
   */
  error: ResponseDtoError | null;
  /**
   *
   * @type {HttpStatus}
   * @memberof SignUpResponse
   */
  status: HttpStatus;
}

/**
 *
 * @export
 * @interface SignUpResponseData
 */
export interface SignUpResponseData {
  /**
   * Access token
   * @type {string}
   * @memberof SignUpResponseData
   */
  accessToken: string;
  /**
   * Token expiration seconds
   * @type {number}
   * @memberof SignUpResponseData
   */
  expiresIn: number;
}
/**
 *
 * @export
 * @interface UpdateArticleDto
 */
export interface UpdateArticleDto {
  /**
   * Article title
   * @type {string}
   * @memberof UpdateArticleDto
   */
  title?: string;
  /**
   * Article description
   * @type {string}
   * @memberof UpdateArticleDto
   */
  description?: string;
}
/**
 *
 * @export
 * @interface UpdateArticleResponse
 */
export interface UpdateArticleResponse {
  /**
   *
   * @type {UpdateArticleResponseData}
   * @memberof UpdateArticleResponse
   */
  data: UpdateArticleResponseData;
  /**
   *
   * @type {ResponseDtoError}
   * @memberof UpdateArticleResponse
   */
  error: ResponseDtoError | null;
  /**
   *
   * @type {HttpStatus}
   * @memberof UpdateArticleResponse
   */
  status: HttpStatus;
}

/**
 *
 * @export
 * @interface UpdateArticleResponseData
 */
export interface UpdateArticleResponseData {
  /**
   * Article id
   * @type {string}
   * @memberof UpdateArticleResponseData
   */
  id: string;
  /**
   * Article title
   * @type {string}
   * @memberof UpdateArticleResponseData
   */
  title: string;
  /**
   * Article description
   * @type {string}
   * @memberof UpdateArticleResponseData
   */
  description: string;
  /**
   * Article author id
   * @type {string}
   * @memberof UpdateArticleResponseData
   */
  authorId: string;
  /**
   * Article publication date
   * @type {string}
   * @memberof UpdateArticleResponseData
   */
  publicationDate: string;
  /**
   * Article created date
   * @type {string}
   * @memberof UpdateArticleResponseData
   */
  createdAt: string;
  /**
   * Article updated date
   * @type {string}
   * @memberof UpdateArticleResponseData
   */
  updatedAt: string;
}

/**
 * ArticlesApi - axios parameter creator
 * @export
 */
export const ArticlesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreateArticleDto} createArticleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerCreate: async (
      createArticleDto: CreateArticleDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createArticleDto' is not null or undefined
      assertParamExists(
        'articleControllerCreate',
        'createArticleDto',
        createArticleDto
      );
      const localVarPath = `/api/articles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createArticleDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerDeleteArticle: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('articleControllerDeleteArticle', 'id', id);
      const localVarPath = `/api/articles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerGetArticleById: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('articleControllerGetArticleById', 'id', id);
      const localVarPath = `/api/articles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [curPage] Current page
     * @param {number} [perPage] Items per page
     * @param {string} [author] Article author username
     * @param {string} [publicationDate] Article publication date
     * @param {ArticleControllerListArticlesOrderByEnum} [orderBy] Field to order by
     * @param {OrderEnum} [order] Order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerListArticles: async (
      curPage?: number,
      perPage?: number,
      author?: string,
      publicationDate?: string,
      orderBy?: ArticleControllerListArticlesOrderByEnum,
      order?: OrderEnum,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/articles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (curPage !== undefined) {
        localVarQueryParameter['curPage'] = curPage;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['perPage'] = perPage;
      }

      if (author !== undefined) {
        localVarQueryParameter['author'] = author;
      }

      if (publicationDate !== undefined) {
        localVarQueryParameter['publicationDate'] =
          (publicationDate as any) instanceof Date
            ? (publicationDate as any).toISOString()
            : publicationDate;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter['orderBy'] = orderBy;
      }

      if (order !== undefined) {
        localVarQueryParameter['order'] = order;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateArticleDto} updateArticleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerUpdateArticle: async (
      id: string,
      updateArticleDto: UpdateArticleDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('articleControllerUpdateArticle', 'id', id);
      // verify required parameter 'updateArticleDto' is not null or undefined
      assertParamExists(
        'articleControllerUpdateArticle',
        'updateArticleDto',
        updateArticleDto
      );
      const localVarPath = `/api/articles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateArticleDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ArticlesApi - functional programming interface
 * @export
 */
export const ArticlesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ArticlesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateArticleDto} createArticleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleControllerCreate(
      createArticleDto: CreateArticleDto,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateArticleResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.articleControllerCreate(
          createArticleDto,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ArticlesApi.articleControllerCreate']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleControllerDeleteArticle(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DeleteArticleResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.articleControllerDeleteArticle(
          id,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ArticlesApi.articleControllerDeleteArticle']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleControllerGetArticleById(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetArticleResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.articleControllerGetArticleById(
          id,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ArticlesApi.articleControllerGetArticleById']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [curPage] Current page
     * @param {number} [perPage] Items per page
     * @param {string} [author] Article author username
     * @param {string} [publicationDate] Article publication date
     * @param {ArticleControllerListArticlesOrderByEnum} [orderBy] Field to order by
     * @param {OrderEnum} [order] Order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleControllerListArticles(
      curPage?: number,
      perPage?: number,
      author?: string,
      publicationDate?: string,
      orderBy?: ArticleControllerListArticlesOrderByEnum,
      order?: OrderEnum,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ListArticlesResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.articleControllerListArticles(
          curPage,
          perPage,
          author,
          publicationDate,
          orderBy,
          order,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ArticlesApi.articleControllerListArticles']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateArticleDto} updateArticleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleControllerUpdateArticle(
      id: string,
      updateArticleDto: UpdateArticleDto,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UpdateArticleResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.articleControllerUpdateArticle(
          id,
          updateArticleDto,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ArticlesApi.articleControllerUpdateArticle']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ArticlesApi - factory interface
 * @export
 */
export const ArticlesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ArticlesApiFp(configuration);
  return {
    /**
     *
     * @param {CreateArticleDto} createArticleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerCreate(
      createArticleDto: CreateArticleDto,
      options?: any
    ): AxiosPromise<CreateArticleResponse> {
      return localVarFp
        .articleControllerCreate(createArticleDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerDeleteArticle(
      id: string,
      options?: any
    ): AxiosPromise<DeleteArticleResponse> {
      return localVarFp
        .articleControllerDeleteArticle(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerGetArticleById(
      id: string,
      options?: any
    ): AxiosPromise<GetArticleResponse> {
      return localVarFp
        .articleControllerGetArticleById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [curPage] Current page
     * @param {number} [perPage] Items per page
     * @param {string} [author] Article author username
     * @param {string} [publicationDate] Article publication date
     * @param {ArticleControllerListArticlesOrderByEnum} [orderBy] Field to order by
     * @param {OrderEnum} [order] Order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerListArticles(
      curPage?: number,
      perPage?: number,
      author?: string,
      publicationDate?: string,
      orderBy?: ArticleControllerListArticlesOrderByEnum,
      order?: OrderEnum,
      options?: any
    ): AxiosPromise<ListArticlesResponse> {
      return localVarFp
        .articleControllerListArticles(
          curPage,
          perPage,
          author,
          publicationDate,
          orderBy,
          order,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateArticleDto} updateArticleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerUpdateArticle(
      id: string,
      updateArticleDto: UpdateArticleDto,
      options?: any
    ): AxiosPromise<UpdateArticleResponse> {
      return localVarFp
        .articleControllerUpdateArticle(id, updateArticleDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ArticlesApi - object-oriented interface
 * @export
 * @class ArticlesApi
 * @extends {BaseAPI}
 */
export class ArticlesApi extends BaseAPI {
  /**
   *
   * @param {CreateArticleDto} createArticleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public articleControllerCreate(
    createArticleDto: CreateArticleDto,
    options?: RawAxiosRequestConfig
  ) {
    return ArticlesApiFp(this.configuration)
      .articleControllerCreate(createArticleDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public articleControllerDeleteArticle(
    id: string,
    options?: RawAxiosRequestConfig
  ) {
    return ArticlesApiFp(this.configuration)
      .articleControllerDeleteArticle(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public articleControllerGetArticleById(
    id: string,
    options?: RawAxiosRequestConfig
  ) {
    return ArticlesApiFp(this.configuration)
      .articleControllerGetArticleById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [curPage] Current page
   * @param {number} [perPage] Items per page
   * @param {string} [author] Article author username
   * @param {string} [publicationDate] Article publication date
   * @param {ArticleControllerListArticlesOrderByEnum} [orderBy] Field to order by
   * @param {OrderEnum} [order] Order direction
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public articleControllerListArticles(
    curPage?: number,
    perPage?: number,
    author?: string,
    publicationDate?: string,
    orderBy?: ArticleControllerListArticlesOrderByEnum,
    order?: OrderEnum,
    options?: RawAxiosRequestConfig
  ) {
    return ArticlesApiFp(this.configuration)
      .articleControllerListArticles(
        curPage,
        perPage,
        author,
        publicationDate,
        orderBy,
        order,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateArticleDto} updateArticleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public articleControllerUpdateArticle(
    id: string,
    updateArticleDto: UpdateArticleDto,
    options?: RawAxiosRequestConfig
  ) {
    return ArticlesApiFp(this.configuration)
      .articleControllerUpdateArticle(id, updateArticleDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ArticleControllerListArticlesOrderByEnum = {
  PublicationDate: 'publicationDate',
  Title: 'title',
} as const;
export type ArticleControllerListArticlesOrderByEnum =
  (typeof ArticleControllerListArticlesOrderByEnum)[keyof typeof ArticleControllerListArticlesOrderByEnum];

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Sign in
     * @param {SignInDto} signInDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIn: async (
      signInDto: SignInDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'signInDto' is not null or undefined
      assertParamExists('signIn', 'signInDto', signInDto);
      const localVarPath = `/api/Auth/sign-in`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signInDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sign up
     * @param {SignUpDto} signUpDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp: async (
      signUpDto: SignUpDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'signUpDto' is not null or undefined
      assertParamExists('signUp', 'signUpDto', signUpDto);
      const localVarPath = `/api/Auth/sign-up`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signUpDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Sign in
     * @param {SignInDto} signInDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signIn(
      signInDto: SignInDto,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(
        signInDto,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.signIn']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Sign up
     * @param {SignUpDto} signUpDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signUp(
      signUpDto: SignUpDto,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignUpResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(
        signUpDto,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.signUp']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @summary Sign in
     * @param {SignInDto} signInDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIn(signInDto: SignInDto, options?: any): AxiosPromise<SignInResponse> {
      return localVarFp
        .signIn(signInDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sign up
     * @param {SignUpDto} signUpDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp(signUpDto: SignUpDto, options?: any): AxiosPromise<SignUpResponse> {
      return localVarFp
        .signUp(signUpDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary Sign in
   * @param {SignInDto} signInDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public signIn(signInDto: SignInDto, options?: RawAxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .signIn(signInDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Sign up
   * @param {SignUpDto} signUpDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public signUp(signUpDto: SignUpDto, options?: RawAxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .signUp(signUpDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
